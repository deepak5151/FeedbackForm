{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Feedback","state","isRedirect","show","handleClose","setState","schema","yup","fullName","required","Email","email","Contact","matches","max","plantname","plantcategory","this","window","location","className","validationSchema","onSubmit","values","output","templateParams","from_name","to_name","subject","message_html","emailjs","initialValues","handleSubmit","handleChange","handleBlur","touched","errors","Form","noValidate","Group","controlId","Label","Control","type","name","placeholder","value","onChange","onBlur","isInvalid","InputGroup","Prepend","Text","id","aria-describedby","as","rows","Button","Modal","onHide","Header","closeButton","Title","Body","Footer","variant","onClick","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2f858ade.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { Formik } from 'formik'\nimport * as yup from 'yup'\nimport * as emailjs from 'emailjs-com'\nimport { Form, InputGroup, Button, Modal } from 'react-bootstrap'\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport default class Feedback extends Component {\n  state = {\n    isRedirect: false,\n    show: false\n  }\n  handleClose = () => {\n    this.setState({ isRedirect: true });\n  }\n\n  render() {\n\n    var phoneNum = /^\\s*(?:\\+?(\\d{1,3}))?[- (]*(\\d{3})[- )]*(\\d{3})[- ]*(\\d{4})(?: *[x/#]{1}(\\d+))?\\s*$/\n    const schema = yup.object({\n      fullName: yup.string().required(\"Please Enter Name\"),\n      Email: yup.string().email().required(),\n      Contact: yup.string().required(\"Please Enter Valid Phone Number\").matches(phoneNum, 'Phone number is not valid')\n        .max(10, \"Maximum 10 digits allowed\"),\n      Feedback: yup.string().required(\"Feedback can't be empty field\"),\n      plantname: yup.string(),\n      plantcategory: yup.string()\n\n    });\n\n    const isRedirect = this.state.isRedirect;\n    if (isRedirect === true) {\n      window.location = '/MyPlantsTalk'\n    }\n    return (\n      <div className=\"pt-4\">\n        <div className=\"text-center my-4\">\n          <h1>Your Feedback is very important for us</h1>\n          <p>Please enter following details so that we can make ourself better</p>\n        </div>\n        <Formik\n          validationSchema={schema}\n          onSubmit={(values) => {\n            const output = `\n                                    <h2>Contact Details</h2>\n                                    <ul>  \n                                    <li><h3>Name: </h3>${values.fullName}</li>\n                                    <li><h3>Email:</h3> ${values.Email}</li>\n                                    <li><h3>Contact: </h3>${values.Contact}</li>\n                                    <li><h3>Suggested Plant Name: </h3>${values.plantname}</li>\n                                    <li><h3>Suggested Plant Category: </h3>${values.plantcategory}</li>\n                                    </ul>\n                                    <h2>Feedback/Suggestions</h2>\n                                    <p>${values.Feedback}</p>\n                                `;\n            let templateParams = {\n              from_name: values.fullName,\n              to_name: 'MyPlantsTalk Team',\n              subject: \"MyPlantsTalk Feedback Received\",\n              message_html: output,\n            }\n            emailjs.send(\n              'gmail',\n              'MyPlantsTalk',\n              templateParams,\n              'user_j06PQALP36QLk36cboLRD'\n            )\n            this.setState({ show: true })\n          }\n          }\n          initialValues={{\n            fullName: \"\",\n            Email: \"\",\n            Contact: \"\",\n            plantname: \"\",\n            plantcategory: \"\",\n            Feedback: \"\"\n          }}\n        >\n          {({\n            handleSubmit,\n            handleChange,\n            handleBlur,\n            values,\n            touched,\n            errors,\n          }) => (\n              <Form noValidate onSubmit={handleSubmit} className=\"container col-md-4 mb-4 \">\n                <Form.Group controlId=\"inputname\">\n                  <Form.Label>Full name</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    name=\"fullName\"\n                    placeholder=\"Enter Full Name\"\n                    value={values.fullName}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    isInvalid={touched.fullName && errors.fullName}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">{errors.fullName}</Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group controlId=\"inputemail\">\n                  <Form.Label>Email</Form.Label>\n                  <InputGroup>\n                    <InputGroup.Prepend>\n                      <InputGroup.Text id=\"inputGroupPrepend\">@</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <Form.Control\n                      type=\"email\"\n                      placeholder=\"Email\"\n                      aria-describedby=\"inputGroupPrepend\"\n                      name=\"Email\"\n                      value={values.Email}\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      isInvalid={touched.Email && errors.Email}\n                    />\n                    <Form.Control.Feedback type=\"invalid\">\n                      {errors.Email}\n                    </Form.Control.Feedback>\n                  </InputGroup>\n                </Form.Group>\n                <Form.Group controlId=\"inputcontact\">\n                  <Form.Label>Contact Number</Form.Label>\n                  <Form.Control\n                    type=\"number\"\n                    placeholder=\"Don't Include +91\"\n                    name=\"Contact\"\n                    value={values.Contact}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    isInvalid={touched.Contact && errors.Contact}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.Contact}\n                  </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group controlId=\"inputplantname\">\n                  <Form.Label>Any Plant you want to include in our system</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter Plant Name Here\"\n                    name=\"plantname\"\n                    value={values.plantname}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    isInvalid={touched.plantname && errors.plantname}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.plantname}\n                  </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group controlId=\"inputplantcategory\">\n                  <Form.Label>Your Suggested plant falls under which category</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"Enter category here\"\n                    name=\"plantcategory\"\n                    value={values.plantcategory}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    isInvalid={touched.plantcategory && errors.plantcategory}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.plantcategory}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group controlId=\"inputfeedback\">\n                  <Form.Label>Your Suggestions or Complaints</Form.Label><br />\n                  <Form.Control\n                    as=\"textarea\"\n                    rows=\"4\"\n                    placeholder=\"Type Here\"\n                    name=\"Feedback\"\n                    value={values.Feedback}\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    isInvalid={touched.Feedback && errors.Feedback}\n                  />\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.Feedback}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n\n                <Button type=\"submit\" className=\"d-flex mx-auto\">Submit Feedback</Button>\n              </Form>\n            )\n          }\n        </Formik >\n        < Modal show={this.state.show} onHide={this.handleClose} >\n          <Modal.Header closeButton>\n            <Modal.Title>Feedback Received</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>Thank you for providing your valuable feedback.\n                                    We will definitely look into it.</Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"primary\" onClick={this.handleClose}>\n              OK\n           </Button>\n          </Modal.Footer>\n        </Modal>\n      </div >\n\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}